out
}
theta.names=c("a",paste("t0",conds,sep="."),
"v",
"z")
savefile=paste("Modelling/dataset1a/07_Outputs/P",useSub,"_z-t0_Model.Rdata",sep="")
source("Modelling/dataset1a/03_background.R")
source("Modelling/dataset1a/04_runIterativeProcess.R")
n.pars = length(theta.names)
# Calculate AIC and BIC for each participant
AIC = -2*max(weight)+ 2*n.pars
BIC = log(length(data$Time))*n.pars-2*max(weight)
save(AIC, BIC, theta,weight,data,burnin,nmc,n.chains,theta.names,conds,
file=savefile)
}
##### Simulate Data Using Parameters ####
conds = c(1,2)
for(useSub in 1:nSub) {
load(paste("Modelling/dataset1a/07_Outputs/P",useSub,"_z-t0_Model.Rdata", sep = "")) #Loads through the datasets of each participant in nSub
#posterior_means = apply(theta, 2, mean) #This code just gets the mean parameter estimates of each data set (not necessary for the loop)
simData=list(Time=NULL,Cond=NULL,Resp=NULL) #Sets up a list with the correct headings in preparation for the simulation
#blah=apply(theta,2,mean)
tmp1=apply(weight,2,max)
tmp2=which.max(tmp1)
tmp3=which.max(weight[,tmp2])
blah=theta[tmp2,,tmp3]
for (cond in conds) { # Loops through each cue condition (congruent and incongruent)
currParams=c(blah["a"],NA,blah["v"],blah[paste("t0", cond, sep = ".")]) # Sets the value of parameters.
names(currParams)=c("a","z","v","t0")  # Sets the names of the parameters
if (cond==conds[1]) {
currParams["z"]=blah["z"]
} else if (cond==conds[2]) {
currParams["z"]=(1-blah["z"])
} else {
stop("Error")
}
tmp=rdiffusion(n=1000,a=currParams["a"],v=currParams["v"],t0=currParams["t0"],z=currParams["z"]*currParams["a"]) # Runs diffusion model to generated data with estimated parameters
simData$Time=c(simData$Time,tmp$rt) # Populates the RT column in the simulated data
simData$Resp=c(simData$Resp,tmp$response) # Populates the Resp column in the simulated data
simData$Cond=c(simData$Cond,rep(cond,length(tmp$rt)))} # Populates the Cond column in the simulated data
sim = as.data.frame(simData) # Convert the simulated data from List format to data frame format
save(sim, file = paste("Data/dataset1a/Model-Predictions/P",useSub,"_z-t0.Rdata", sep = ""))
}
for(useSub in 1:nSub) {
load(paste("Modelling/dataset1a/07_Outputs/P",useSub,"Simple_Model.Rdata", sep = "")) #Loads through the datasets of each participant in nSub
simData=list(Time=NULL,Cond=NULL,Resp=NULL) #Sets up a list with the correct headings in preparation for the simulation
tmp1=apply(weight,2,max)
tmp2=which.max(tmp1)
tmp3=which.max(weight[,tmp2])
blah=theta[tmp2,,tmp3]
for (cond in conds) { # Loops through each cue condition (congruent and incongruent)
currParams=c(blah["a"],0.5,blah["v"],blah["t0"]) # Sets the value of parameters.
names(currParams)=c("a","z","v","t0")  # Sets the names of the parameters
tmp=rdiffusion(n=100000,a=currParams["a"],v=currParams["v"],t0=currParams["t0"],z=currParams["z"]*currParams["a"]) # Runs diffusion model to generated data with estimated parameters
simData$Time=c(simData$Time,tmp$rt) # Populates the RT column in the simulated data
simData$Resp=c(simData$Resp,tmp$response) # Populates the Resp column in the simulated data
simData$Cond=c(simData$Cond,rep(cond,length(tmp$rt)))} # Populates the Cond column in the simulated data
sim = as.data.frame(simData) # Convert the simulated data from List format to data frame format
save(sim, file = paste("Data/dataset1a/Model-Predictions/P",useSub,"_simple.RData", sep = ""))
}
rm(list = ls())
load("~/Dropbox/2021/Gaze-Cueing/Data/dataset1a/clean/all-participants.RData")
faces = P
load("~/Dropbox/2021/Gaze-Cueing/Data/dataset1b/clean/all-participants.RData")
faces.data = P
arrows.data = P
data = rbind(faces.data, arrows.data)
View(data)
faces.data$Cue = "Face"
cor(faces.data$Time, arrows.data$Time)
load("~/Dropbox/2021/Gaze-Cueing/Data/dataset1a/clean/all-participants.RData")
faces.data = P
load("~/Dropbox/2021/Gaze-Cueing/Data/dataset1b/clean/all-participants.RData")
arrows.data = P
cor(faces.data$Time, arrows.data$Time)
faces.magnitude = faces.data %>%
group_by(ID)
View(faces.magnitude)
faces.magnitude = faces.data %>%
group_by(Cond)
View(faces.magnitude)
faces.magnitude = faces.data %>%
group_by(ID) %>%
summarise(Magnitude = mean(Time))
View(faces.magnitude)
faces.magnitude = faces.data %>%
select(ID, Time, Cond)
faces.data = faces.data %>%
select(ID, Time, Cond)
time.2 = faces.data$Time
faces.data.1 =
faces.data.2 = filter(faces.data, Cond == 2)
time.2 = faces.data$Time
faces.data.1 = faces.data.2 = filter(faces.data, Cond == 1)
faces.data = cbind(faces.data.1, time.2)
faces.data = faces.data %>%
select(ID, Time, Cond) %?%
group_by(Cond) %>%
summarise(Time = mean(Time))
faces.data = faces.data %>%
select(ID, Time, Cond) %.%
group_by(Cond) %>%
summarise(Time = mean(Time))
faces.data = faces.data %>%
select(ID, Time, Cond) %>%
group_by(Cond) %>%
summarise(Time = mean(Time))
faces.data
load("~/Dropbox/2021/Gaze-Cueing/Data/dataset1a/clean/all-participants.RData")
faces.data = P
faces.data = faces.data %>%
select(ID, Time, Cond) %>%
group_by(ID,Cond) %>%
summarise(Time = mean(Time))
faces.data
faces.data.1 = faces.data.2 = filter(faces.data, Cond == 1)
faces.data.2 = filter(faces.data, Cond == 2)
time.2 = faces.data$Time
faces.data = cbind(faces.data.1, time.2)
time.2 = faces.data.2$Time
faces.data = cbind(faces.data.1, time.2)
faces.data
faces.data = select(faces.data, -Cond)
faces.data
colnames(faces.data, c("ID", "Time.1", "Time.2"))
colnames(faces.data) = c("ID", "Time.1", "Time.2"))
colnames(faces.data) = c("ID", "Time.1", "Time.2")
faces.data
faces.data$magnitude.faces = faces.data$Time.2 - faces.data$Time.2
faces.data
faces.data$magnitude.faces = faces.data$Time.2 - faces.data$Time.1
faces.data
View(faces.data)
load("~/Dropbox/2021/Gaze-Cueing/Data/dataset1b/clean/all-participants.RData")
arrows.data = P
arrows.data = arrows.data %>%
select(ID, Time, Cond) %>%
group_by(ID,Cond) %>%
summarise(Time = mean(Time))
arrows.data.1 = arrows.data.2 = filter(arrows.data, Cond == 1)
arrows.data.2 = filter(arrows.data, Cond == 2)
time.2 = arrows.data.2$Time
arrows.data = cbind(arrows.data.1, time.2)
arrows.data = select(arrows.data, -Cond)
colnames(arrows.data) = c("ID", "Time.1", "Time.2")
arrows.data$magnitude.arrows = arrows.data$Time.2 - arrows.data$Time.1
cor(faces.data$magnitude.faces, arrows.data$magnitude.arrows,)
arrows.data
cor(faces.data$magnitude.faces, arrows.data$magnitude.arrows)
plot(faces.data$magnitude.faces, arrows.data$magnitude.arrows)
View(arrows.data)
cor(cor(faces.data$magnitude.faces[-25,], arrows.data$magnitude.arrows[-25,]))
cor(cor(faces.data$magnitude.faces[,-25], arrows.data$magnitude.arrows[,-25]))
rm25.faces = faces.data[-25,]
rm25.arrows = arrows.data[-25,]
cor(rm25.faces, rm25.arrows)
cor(rm25.faces$magnitude.faces, rm25.arrows$magnitude.arrows)
source('~/Dropbox/2021/Gaze-Cueing/Modelling/dataset1a/09.3_quantiles_all.R')
source('~/Dropbox/2021/Gaze-Cueing/Modelling/dataset1a/09.3_quantiles_all.R')
rm(list = ls())
setwd("Dropbox/2021/Gaze-Cueing")
setwd("~/Dropbox/2021/Gaze-Cueing")
load("Data/dataset1a/derived/BICs.Rdata")
load("Data/dataset1a/derived/AICs.Rdata")
rm(list = ls())
load("Data/dataset1a/derived/BICs.Rdata")
getWeights=function(x) {
useX = x*(-0.5) # Transform BIC/AIC to a chi square distribution
if (mean(is.na(useX)) == 1) {
return(NA)
}
maxLogDens=max(useX)
if (maxLogDens > 700) {
densTransform=maxLogDens-700
useX=useX-densTransform
} else if (maxLogDens < -710) {
densTransform=maxLogDens-700
useX=useX-densTransform
} else {
densTransform=0
}
exp(useX)/sum(exp(useX))
}
BICweights=array(NA,c(S,8))
View(BIC_comp)
S = 41
incl_prob=array(NA,c(S,3))
View(incl_prob)
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
prob_z=sum(BICweights[use.i,c("z","v_z", "all_params", "z_t0")])
BICweights=array(NA,c(S,8))
BICweights=array(NA,c(S,8))
for (s in 1:S) {
BICweights[s,]= getWeights(BIC_comp[s,])
}
colnames(BICweights) = c("v_z", "none", "v", "z", "z_t0", "v_t0", "all_params", "t0")
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
prob_z=sum(BICweights[use.i,c("z","v_z", "all_params", "z_t0")])
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
for (i in 1:S) {
use.i=i
prob_z=sum(BICweights[use.i,c("z","v_z", "all_params", "z_t0")])
prob_v=sum(BICweights[use.i,c("v","v_z", "all_params", "v_t0")])
prob_t0=sum(BICweights[use.i,c("t0","z_t0", "all_params", "v_t0")])
}
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
for (i in 1:S) {
#use.i=i
prob_z=sum(BICweights[use.i,c("z","v_z", "all_params", "z_t0")])
prob_v=sum(BICweights[use.i,c("v","v_z", "all_params", "v_t0")])
prob_t0=sum(BICweights[use.i,c("t0","z_t0", "all_params", "v_t0")])
}
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
for (i in 1:S) {
use.i=i
prob_z[use.i]=sum(BICweights[use.i,c("z","v_z", "all_params", "z_t0")])
prob_v=sum(BICweights[use.i,c("v","v_z", "all_params", "v_t0")])
prob_t0=sum(BICweights[use.i,c("t0","z_t0", "all_params", "v_t0")])
}
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
for (i in 1:S) {
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
for (i in 1:S) {
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
for (i in 1:S) {
))))
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
for (i in 1:S) {
use.i=i
prob_z[use.i]=sum(BICweights[use.i,c("z","v_z", "all_params", "z_t0")])
prob_v[use.i}=sum(BICweights[use.i,c("v","v_z", "all_params", "v_t0")])
prob_t0[use.i]=sum(BICweights[use.i,c("t0","z_t0", "all_params", "v_t0")])
}
#png("Modelling/dataset1a/08_Plots/inclusion-prob-BIC-z.png")
plot(x=100,y=100,xlim=c(0,S),ylim=c(0,1),xlab="",ylab="",main="z Inclusion Probability BIC",xaxt="n",yaxt="n")
for (i in 1:S) {
use.i=i
sumThing=0
col=hcl(h=330,c=100,l=0)
currWeight=sum(BICweights[use.i,c("none","v","t0", "v_t0")])
rect(i-0.5,0,i+0.5,currWeight, border = col, col = col)
sumThing=sumThing+currWeight
col=hcl(h=110,c=100,l=40)
currWeight=sum(BICweights[use.i,c("z","v_z", "all_params", "z_t0")])
rect(i-0.5,sumThing,i+0.5,sumThing+currWeight, border = col, col = col)
sumThing=sumThing+currWeight
}
axis(side=2, at=seq(0,1,0.5), labels=seq(0,1,0.5),cex.axis=1.5)
axis(side=1, at=seq(0,S,S), labels=seq(0,S,S), cex.axis=1.5)
legend("bottom", legend = c("z varies", "z does not vary"),
col = c(hcl(h=110,c=100,l=40),hcl(h=330,c=100,l=0)),
pch = 15,
inset=c(0,0),
horiz = T,
cex = .73)
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
for (i in 1:S) {
use.i=i
prob_z[use.i]=sum(BICweights[use.i,c("z","v_z", "all_params", "z_t0")])
prob_v[use.i}=sum(BICweights[use.i,c("v","v_z", "all_params", "v_t0")])
prob_t0[use.i]=sum(BICweights[use.i,c("t0","z_t0", "all_params", "v_t0")])
}
#png("Modelling/dataset1a/08_Plots/inclusion-prob-BIC-z.png")
plot(x=100,y=100,xlim=c(0,S),ylim=c(0,1),xlab="",ylab="",main="z Inclusion Probability BIC",xaxt="n",yaxt="n")
for (i in 1:S) {
use.i=i
sumThing=0
col=hcl(h=330,c=100,l=0)
currWeight=sum(BICweights[use.i,c("none","v","t0", "v_t0")])
rect(i-0.5,0,i+0.5,currWeight, border = col, col = col)
sumThing=sumThing+currWeight
col=hcl(h=110,c=100,l=40)
currWeight=sum(BICweights[use.i,c("z","v_z", "all_params", "z_t0")])
rect(i-0.5,sumThing,i+0.5,sumThing+currWeight, border = col, col = col)
sumThing=sumThing+currWeight
}
axis(side=2, at=seq(0,1,0.5), labels=seq(0,1,0.5),cex.axis=1.5)
axis(side=1, at=seq(0,S,S), labels=seq(0,S,S), cex.axis=1.5)
legend("bottom", legend = c("z varies", "z does not vary"),
col = c(hcl(h=110,c=100,l=40),hcl(h=330,c=100,l=0)),
pch = 15,
inset=c(0,0),
horiz = T,
cex = .73)
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
for (i in 1:S) {
use.i=i
prob_z[use.i]=sum(BICweights[use.i,c("z","v_z", "all_params", "z_t0")])
prob_v[use.i]=sum(BICweights[use.i,c("v","v_z", "all_params", "v_t0")])
prob_t0[use.i]=sum(BICweights[use.i,c("t0","z_t0", "all_params", "v_t0")])
}
BIC_incl_prob = cbind(prob_z, prob_v, prob_t0)
View(BIC_incl_prob)
#To get a inclusion probability for z, we just add the models that have z and don’t have z:
for (i in 1:S) {
prob_z[i]=sum(BICweights[i,c("z","v_z", "all_params", "z_t0")])
prob_v[i]=sum(BICweights[i,c("v","v_z", "all_params", "v_t0")])
prob_t0[i]=sum(BICweights[i,c("t0","z_t0", "all_params", "v_t0")])
}
save("data/dataset1a/derived/BIC_inclusion_probabilities.RData")
save(BIC_incl_prob,"data/dataset1a/derived/BIC_inclusion_probabilities.RData")
save(BIC_incl_prob,"data/dataset1a/derived/BIC_inclusion_probabilities.RData")
save(BIC_incl_prob, file = "data/dataset1a/derived/BIC_inclusion_probabilities.RData")
#Get gaze cueing magnitudes
library(tidyverse)
load("~/Dropbox/2021/Gaze-Cueing/Data/dataset1a/clean/all-participants.RData")
data = P
data = data %>%
select(ID, Time, Cond) %>%
group_by(ID,Cond) %>%
summarise(Time = mean(Time))
data.1 = data.2 = filter(data, Cond == 1)
data.2 = filter(data, Cond == 2)
time.2 = data.2$Time
data = cbind(data.1, time.2)
data = select(data, -Cond)
colnames(data) = c("ID", "Time.1", "Time.2")
magnitude = data$Time.2 - data$Time.1
#Get mean parameter differences for each participant
params =array(NA,c(S,5))
for (i in 1:S) {
= load(paste("Modelling/dataset1a/07_Outputs/P",i,"_all-params_Model.RData", sep = ""))
params[i,]  = apply(theta, 2, mean)
}
for (i in 1:S) {
load(paste("Modelling/dataset1a/07_Outputs/P",i,"_all-params_Model.RData", sep = ""))
params[i,]  = apply(theta, 2, mean)
}
#Get mean parameter differences for each participant
params =array(NA,c(S,6))
for (i in 1:S) {
load(paste("Modelling/dataset1a/07_Outputs/P",i,"_all-params_Model.RData", sep = ""))
params[i,]  = apply(theta, 2, mean)
}
View(params)
colnames(params) = theta.names
View(params)
params$t0.diff = params$t0.2-t0.1
params = as.data.frame(params)
params$t0.diff = params$t0.2-t0.1
params$t0.diff = params$t0.2-params$t0.1
params$v.diff = params$v.2-params$v.1
params.diff = select(params, z, v.diff, t0.diff, )
View(params.diff)
table = cbind(magnitudes, params.diff, prob_z, prob_v, prob_t0)
table = cbind(magnitude, params.diff, prob_z, prob_v, prob_t0)
View(table)
round(prob_t0[29], 2)
round(prob_t0[5], 2)
save(table, file = "data/dataset1a/derived/magnitudes-params-incl.probs.RData")
View(table)
BICweight$magnitude = magnitude
BICweights$magnitude = magnitude
BICweights=array(NA,c(S,8))
for (s in 1:S) {
BICweights[s,]= getWeights(BIC_comp[s,])
}
colnames(BICweights) = c("v_z", "none", "v", "z", "z_t0", "v_t0", "all_params", "t0")
BICweights = as.data.frame(BICweights)
BICweights$magnitude = magnitude
order(BICweights$ma)
order(BICweights$magnitude)
BICweights[order(BICweights$magnitude)]
BICweights[order(BICweights$magnitude),]
BICweights = BICweights[order(BICweights$magnitude),]
View(BICweights)
# Plotting
for (i in 1:S) {
use.i=i
sumThing=0
col=hcl(h=330,c=100,l=40) #Purple
rect(i-0.5,0,i+0.5,BICweights[use.i,"none"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"none"]
col=hcl(h=130,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"z"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"z"] #green
col=hcl(h=220,c=100,l=40)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"v"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"v"] #Yellow
col=hcl(h=420,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"v_z"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"v_z"] #Blue
col=hcl(h=180,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"t0"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"t0"]
col=hcl(h=280,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"z_t0"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"z_t0"]
col=hcl(h=380,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"v_t0"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"v_t0"]
col=hcl(h=80,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"all_params"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"all_params"]
}
filter(BFweights, magnitude > 0)
filter(BICweights, magnitude > 0)
magGt0 = filter(BICweights, magnitude > 0)
View(magGt0)
BICweights = filter(BICweights)
BICweights = magGt0
S = 30 #n participants
plot(x=100,y=100,xlim=c(0,S),ylim=c(0,1),xlab="",ylab="",main="BIC",xaxt="n",yaxt="n")
# Plotting
for (i in 1:S) {
use.i=i
sumThing=0
col=hcl(h=330,c=100,l=40) #Purple
rect(i-0.5,0,i+0.5,BICweights[use.i,"none"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"none"]
col=hcl(h=130,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"z"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"z"] #green
col=hcl(h=220,c=100,l=40)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"v"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"v"] #Yellow
col=hcl(h=420,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"v_z"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"v_z"] #Blue
col=hcl(h=180,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"t0"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"t0"]
col=hcl(h=280,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"z_t0"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"z_t0"]
col=hcl(h=380,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"v_t0"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"v_t0"]
col=hcl(h=80,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"all_params"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"all_params"]
}
BICweights=array(NA,c(S,8))
for (s in 1:S) {
BICweights[s,]= getWeights(BIC_comp[s,])
}
colnames(BICweights) = c("v_z", "none", "v", "z", "z_t0", "v_t0", "all_params", "t0")
BICweights = as.data.frame(BICweights)
BICweights$magnitude = magnitude
S = 41 #n participants
BICweights=array(NA,c(S,8))
for (s in 1:S) {
BICweights[s,]= getWeights(BIC_comp[s,])
}
colnames(BICweights) = c("v_z", "none", "v", "z", "z_t0", "v_t0", "all_params", "t0")
png("Modelling/dataset1a/08_Plots/weighted-prob-BIC.png")
dev.off()
BICweights = as.data.frame(BICweights)
BICweights$magnitude = magnitude
BICweights = filter(BICweights, magnitude <= 0)
View(BICweights)
S = 11 #n participants
plot(x=100,y=100,xlim=c(0,S),ylim=c(0,1),xlab="",ylab="",main="BIC",xaxt="n",yaxt="n")
# Plotting
for (i in 1:S) {
use.i=i
sumThing=0
col=hcl(h=330,c=100,l=40) #Purple
rect(i-0.5,0,i+0.5,BICweights[use.i,"none"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"none"]
col=hcl(h=130,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"z"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"z"] #green
col=hcl(h=220,c=100,l=40)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"v"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"v"] #Yellow
col=hcl(h=420,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"v_z"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"v_z"] #Blue
col=hcl(h=180,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"t0"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"t0"]
col=hcl(h=280,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"z_t0"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"z_t0"]
col=hcl(h=380,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"v_t0"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"v_t0"]
col=hcl(h=80,c=100,l=70)
rect(i-0.5,sumThing,i+0.5,sumThing+BICweights[use.i,"all_params"], border = col, col = col)
sumThing=sumThing+BICweights[use.i,"all_params"]
}
axis(side=2, at=seq(0,1,0.5), labels=seq(0,1,0.5),cex.axis=1.5)
axis(side=1, at=seq(0,S,S), labels=seq(0,S,S), cex.axis=1.5)
cor(table$prob_t0, table$magnitude)
plot(table$prob_t0, table$magnitude)
plot(table$t0.diff, table$magnitude)
cor(table$t0.diff, table$magnitude)
cor(table$z.diff, table$magnitude)
cor(table$z, table$magnitude)
cor(table$v.diff, table$magnitude)
cor(table$v.diff, table$)
cor(table$t0.diff, table$prob_t0)
source('~/Dropbox/2021/Gaze-Cueing/Modelling/dataset1a/05.8_runDiffModel_simple.R')
source('~/Dropbox/2021/Gaze-Cueing/Modelling/dataset1a/05.8_runDiffModel_simple.R')
sd(theta[,"v",2001:3000]-theta[,"a",2001:3000])
sd(theta[,"v",2001:3000]-theta[,"a",2001:3000])
dim(theta)
sd(theta[,"v",]-theta[,”a”,])
sd(theta[,"v",]-theta[,"a",])
hist(theta[,"v"])
hist(theta[,"v",])
hist(theta[,"t0",])
source('~/Dropbox/2021/Gaze-Cueing/Modelling/dataset1a/05.8_runDiffModel_simple.R')
sd(theta[,"v",]-theta[,"a",])
hist(theta[,"t0",])
hist(theta[,"v",])
source('~/Dropbox/2021/Gaze-Cueing/Modelling/dataset1a/05.8_runDiffModel_simple.R')
sd(theta[,"v",]-theta[,"a",])
hist(theta[,"t0",])
hist(theta[,"v",])
hist(theta[,"a",])
