load("~/cloudstor/Gaze-Cueing/Data/dataset3/clean/all-participants.Rdata")
load("~/cloudstor/Gaze-Cueing/Data/dataset3/clean/P24.Rdata")
load("~/cloudstor/Gaze-Cueing/Data/dataset3/clean/P56.Rdata")
library(readxl)
X63_loc <- read_excel("~/cloudstor/Gaze-Cueing/Data/Chenetal-2021/63_loc.xlsx")
View(X63_loc)
library(readxl)
X59_loc <- read_excel("~/cloudstor/Gaze-Cueing/Data/Chenetal-2021/59_loc.xlsx")
View(X59_loc)
source("~/cloudstor/Gaze-Cueing/Data/dataset2/clean/01_Cleaning2.R")
source("~/cloudstor/Gaze-Cueing/Data/dataset3/clean/01_Cleaning3.R")
source("~/cloudstor/Gaze-Cueing/Data/dataset1a/clean/01_Cleaning1a.R")
source("~/cloudstor/Gaze-Cueing/Data/dataset1b/clean/01_Cleaning1b.R")
source("~/cloudstor/Gaze-Cueing/Data/dataset1b/clean/01_Cleaning1b.R")
source("~/cloudstor/Gaze-Cueing/Hierarchical-Modelling/dataset1a/06.Hier_quantiles.R")
source("~/cloudstor/Gaze-Cueing/Hierarchical-Modelling/dataset1a/06.Hier_quantiles.R")
source("~/cloudstor/Gaze-Cueing/Hierarchical-Modelling/dataset1a/06.Hier_quantiles.R")
source("~/cloudstor/Gaze-Cueing/Hierarchical-Modelling/dataset1a/06.Hier_quantiles.R")
source("~/cloudstor/Gaze-Cueing/Hierarchical-Modelling/dataset1a/06.Hier_quantiles.R")
ggplot()+
geom_point(aes(x = q.mean.2.1, y = qs*p.mean.2.1))+
geom_point(aes(x = q.mean.2.1_Sim, y = qs*p.mean.2.1_Sim),shape = 17)+
geom_line(aes(x = q.mean.2.1_Sim, y = qs*p.mean.2.1_Sim))+
theme_apa()
ggplot(xlab = "quantile")+
geom_point(aes(x = q.mean.2.1, y = qs*p.mean.2.1))+
geom_point(aes(x = q.mean.2.1_Sim, y = qs*p.mean.2.1_Sim),shape = 17)+
geom_line(aes(x = q.mean.2.1_Sim, y = qs*p.mean.2.1_Sim))+
theme_apa()
ggplot()+
geom_point(aes(x = q.mean.2.1, y = qs*p.mean.2.1))+
geom_point(aes(x = q.mean.2.1_Sim, y = qs*p.mean.2.1_Sim),shape = 17)+
geom_line(aes(x = q.mean.2.1_Sim, y = qs*p.mean.2.1_Sim))+
theme_apa()
#Now let's plot again
ggplot(q.means_inc)+
geom_point(aes(x = q.means, y = p.means, shape = Data))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
View(q.mean)
View(q.mean.sim)
View(q.mean_inc)
View(q.mean.sim_inc)
#Now let's plot again
ggplot()+
geom_point(q.means_inc,aes(x = q.means, y = p.means, shape = Data))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
#Now let's plot again
ggplot()+
geom_point(data = q.means_inc,aes(x = q.means, y = p.means, shape = Data))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
#Now let's plot again
ggplot()+
geom_point(data = q.means_inc,aes(x = q.means, y = p.means, shape = Data))+
geom_point(data = q.means_,aes(x = q.means, y = p.means, shape = Data))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
#Now let's plot again
ggplot()+
geom_point(data = q.means_inc,aes(x = q.means, y = p.means, shape = Data))+
geom_point(data = q.means,aes(x = q.means, y = p.means, shape = Data))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
View(q.mean)
View(q.mean_inc)
View(q.mean.sim)
View(q.mean.sim_inc)
q.means$cond = "congruent"
View(q.means)
q.means_inc$cond = "incongruent"
q.means_inc
q.means_combined = rbind(q.mean_inc,q.means)
q.means
#combine congruent and incongruent conditions for plotting
q.means_combined = rbind(q.mean_inc,q.means)
length(q.mean_inc)
#combine congruent and incongruent conditions for plotting
q.means_combined = rbind(q.means_inc,q.means)
q.means_combined
#Now let's plot again
ggplot(q.means_combined)+
geom_point(aes(x = q.means, y = p.means, shape = Data, colour = cond))+
geom_point(data = q.means,aes(x = q.means, y = p.means, shape = Data))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
#Now let's plot again
ggplot(q.means_combined)+
geom_point(aes(x = q.means, y = p.means, shape = Data, colour = cond))+
geom_point(aes(x = q.means, y = p.means, shape = Data))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
View(q.means_combined)
#Now let's plot again
ggplot(q.means_combined)+
geom_point(aes(x = q.means, y = p.means, shape = Data, colour = cond))+
geom_point(aes(x = q.means, y = p.means, shape = Data))+
geom_line(data = filter(q.means_combined, data = "Complex Model"),aes(x = q.means, y = p.means))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
View(q.means_combined)
#Now let's plot again
ggplot(q.means_combined)+
geom_point(aes(x = q.means, y = p.means, shape = Data, colour = cond))+
geom_point(aes(x = q.means, y = p.means, shape = Data))+
geom_line(data = filter(q.means_combined, Data = "Complex Model"),aes(x = q.means, y = p.means))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
filter(q.means_combined, Data = "Complex Model")
#Now let's plot again
ggplot(q.means_combined)+
geom_point(aes(x = q.means, y = p.means, shape = Data, colour = cond))+
geom_point(aes(x = q.means, y = p.means, shape = Data))+
geom_line(data = filter(q.means_combined, Data == "Complex Model"),aes(x = q.means, y = p.means))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
#Now let's plot again
ggplot(q.means_combined)+
geom_point(aes(x = q.means, y = p.means, shape = Data, colour = cond))+
geom_point(aes(x = q.means, y = p.means, shape = Data))+
geom_line(data = filter(q.means_combined, Data == "Complex Model"),aes(x = q.means, y = p.means, colour = cond))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
#Now let's plot again
ggplot(q.means_combined)+
geom_point(aes(x = q.means, y = p.means, colour = cond))+
geom_point(aes(x = q.means, y = p.means, colour = cond))+
geom_line(data = filter(q.means_combined, Data == "Complex Model"),aes(x = q.means, y = p.means, colour = cond))+
ylab("p.means*qs")+
labs(title = "Incongruent")+
theme_apa()
theta1 = seq(0,1,0.1)
theta2 = seq(0,1,0.1)
a1 = 31
b1 = 69
a2 = 44
b2 = 56
alpha1 = 10
beta2 = 20
beta1 = 20
alpha2 = 12
beta2 = 18
n1 = a1+a2
n1 = a1+b1
n2 = a2+b2
z1 = 31
#b1 = 69
z2 = 44
posterior = (theta1^(z1+alpha1-1))*((1-theta1)^(n1-z1+beta1-1))*(theta2^(z2+alpha2-1))*((1-theta2)^(n2-z2+beta2-1))
plot(theta1,posterior)
plot(theta1,posterior,"l")
lines(theta2,posterior,"l")
theta1 = seq(0,1,0.01)
theta2 = seq(0,1,0.01)
posterior = ((theta1^(z1+alpha1-1))*((1-theta1)^(n1-z1+beta1-1))*(theta2^(z2+alpha2-1))*((1-theta2)^(n2-z2+beta2-1)))/
posterior = ((theta1^(z1+alpha1-1))*((1-theta1)^(n1-z1+beta1-1))*(theta2^(z2+alpha2-1))*((1-theta2)^(n2-z2+beta2-1)))/
plot(theta1,posterior)
posterior = ((theta1^(z1+alpha1-1))*((1-theta1)^(n1-z1+beta1-1))*(theta2^(z2+alpha2-1))*((1-theta2)^(n2-z2+beta2-1)))/
plot(theta1,posterior)
posterior = ((theta1^(z1+alpha1-1))*((1-theta1)^(n1-z1+beta1-1))*(theta2^(z2+alpha2-1))*((1-theta2)^(n2-z2+beta2-1)))/
plot(theta1,posterior)
theta1 = seq(0,1,0.01)
theta2 = seq(0,1,0.01)
posterior = ((theta1^(z1+alpha1-1))*((1-theta1)^(n1-z1+beta1-1))*(theta2^(z2+alpha2-1))*((1-theta2)^(n2-z2+beta2-1)))/
plot(theta1,posterior)
z1 = 31
#b1 = 69
z2 = 44
#b2 = 56
alpha1 = 10
beta1 = 20
alpha2 = 12
beta2 = 18
n1 = a1+b1
n2 = a2+b2
posterior = ((theta1^(z1+alpha1-1))*((1-theta1)^(n1-z1+beta1-1))*(theta2^(z2+alpha2-1))*((1-theta2)^(n2-z2+beta2-1)))/
plot(theta1,posterior)
posterior = ((theta1^(z1+alpha1-1))*((1-theta1)^(n1-z1+beta1-1))*(theta2^(z2+alpha2-1))*((1-theta2)^(n2-z2+beta2-1)))
plot(theta1,posterior)
plot(theta1,posterior,"l")
posterior = ((theta1^(z1+alpha1-1))*((1-theta1)^(n1-z1+beta1-1))*(theta2^(z2+alpha2-1))*((1-theta2)^(n2-z2+beta2-1)))/
posterior_alt = dbeta(theta1, z1+a1,n1-z1+a1)*dbeta(theta2, z2+a2,n2-z2+a2)
posterior_alt = dbeta(theta1, z1+a1,n1-z1+a1)*dbeta(theta2, z2+a2,n2-z2+a2)
plot(theta1,posterior_alt,"l")
sum(posterior_alt)
posterior = ((theta1^(z1+alpha1-1))*((1-theta1)^(n1-z1+beta1-1))*(theta2^(z2+alpha2-1))*((1-theta2)^(n2-z2+beta2-1)))/(dbeta(theta1, z1+a1,n1-z1+a1)*dbeta(theta2, z2+a2,n2-z2+a2))
plot(theta1,posterior,"l")
pD =  dbeta(theta1, z1+a1,n1-z1+a1)*dbeta(theta2, z2+a2,n2-z2+a2)/(dbeta(theta1,alpha1,beta1)*dbeta(theta2,alpha2,beta2))
sum(pD)
pD
plot(theta1,pD)
sum(pD, na.rm = T)
posterior_alt = dbeta(theta1, z1+a1,n1-z1+a1)*dbeta(theta2, z2+a2,n2-z2+a2)/pD
sum(posterior_alt)
sum(posterior_alt, na.rm = T)
plot(theta1,posterior_alt,"l")
plot(theta1*posterior,theta2*posterior)
install.packages("plotly")
library(plotly)
plot_ly(x = theta1, y = theta2, z = posterior)
plot(theta1*posterior_alt,theta2*posterior)
plot_ly(x = theta1, y = theta2, z = posterior_alt)
posterior_alt = dbeta(theta1, z1+a1,n1-z1+a1)*dbeta(theta2, z2+a2,n2-z2+a2)
plot_ly(x = theta1, y = theta2, z = posterior_alt)
posterior_alt = dbeta(theta1, z1+a1,n1-z1+a1)*dbeta(theta2, z2+a2,n2-z2+a2)
plot(theta1, posterior_alt)
plot(theta2, posterior_alt)
theta2 = seq(1,0,0.01)
posterior_alt = dbeta(theta1, z1+a1,n1-z1+a1)*dbeta(theta2, z2+a2,n2-z2+a2)
plot(theta1,posterior_alt,"l")
plot(theta2,posterior_alt,"l")
theta_norm = seq(0,10,0.01)
prior = dnorm(theta_norm,5,3)
likelihhod = dnorm(theta_norm,4,1)
prior = dnorm(theta_norm,5,3)
likelihhod = dnorm(theta_norm,4,1)
post_norm = prior*likelihhod
plot(theta_norm,post_norm)
library(aaltobda)
knitr::opts_chunk$set(echo = TRUE)
library(aaltobda)
library(markmyassignment)
library(tidyverse)
alpha = rnorm(10000,0,2^2)
beta = rnorm(10000,10,10^2)
# means of alpha and beta
alpha_mean = mean(alpha)
beta_mean = mean(beta)
biv_mean = c(alpha_mean,beta_mean)
names(biv_mean) = c("alpha","beta")
biv_mean
# Covariance of alpha and beta
abComb = cbind(alpha,beta)
biv_cov = cov(abComb)
names(biv_cov) = c("alpha","beta")
data("bioassay_posterior")
data = bioassay_posterior
MCSE = function(theta) {
sqrt(var(theta)/length(theta))
}
MCSE_alpha = MCSE(data$alpha)
names(MCSE_alpha) = "MCSE alpha"
MCSE_alpha
mean_alpha = round(mean(data$alpha),2)
names(mean_alpha) = "alpha mean"
CI_alpha = quantile(data$alpha, c(0.025,0.975))
round(c(mean_alpha,CI_alpha),1) # Round to 1 decimal place because there is 1 non-zero MCSE
# decimal.
MCSE_beta = MCSE(data$beta)
names(MCSE_beta) = "MCSE Beta"
MCSE_beta
mean_beta = mean(data$beta)
names(mean_beta) = "beta mean"
CI_beta = quantile(data$beta, c(0.025,0.975))
round(c(mean_beta,CI_beta),1)
gX = dmvnorm(cbind(alpha,beta),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta))) # target
?dmvnorm
plot(theta,gX)
theta = cbind(alpha,beta)
gX = dmvnorm(cbind(alpha,beta),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta))) # target
plot(theta,gX)
theta = cbind(seq(-3,3,length.out = length(alpha)))
theta = cbind(seq(-3,3,length.out = length(alpha)),seq(15,30,length.out = length(theta)))
theta = cbind(seq(-3,3,length.out = length(ns)),seq(15,30,length.out = length(ns)))
ns = 10000
theta = cbind(seq(-3,3,length.out = length(ns)),seq(15,30,length.out = length(ns)))
gX = dmvnorm(theta,c(mean(alpha),mean(beta)),cov(cbind(alpha,beta))) # target
plot(theta,gX)
plot(theta[,1],gX)
theta =c(seq(-3,30,length.out = ns),seq(15,30,length.out = ns))
gX = dmvnorm(theta,c(mean(alpha),mean(beta)),cov(cbind(alpha,beta))) # target
theta =c(seq(-3,30,length.out = ns),seq(15,30,length.out = ns))
head(theta)
theta =cbind(seq(-3,30,length.out = ns),seq(15,30,length.out = ns))
head(theta)
gX = dmvnorm(theta,c(mean(alpha),mean(beta)),cov(cbind(alpha,beta))) # target
heaed(gX)
head(gX)
fX= dmvnorm(theta,c(0,10),c(2^2,10^2),cov(cbind(rnorm(ns,0,2^2),rnorm(10,10^2))))# proposal/prior from a)
fX= dmvnorm(theta,c(0,10),cov(cbind(rnorm(ns,0,2^2),rnorm(10,10^2))))# proposal/prior from a)
fX
gx
gX
head(gX)
head(fX)
