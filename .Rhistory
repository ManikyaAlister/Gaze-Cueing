tmp=lapply(all.data,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
for (s in 1:length(participants_alt)) {
if (nrow(tmp[[s]])==1) {
tmp[[s]]=rbind(list(rep(NA,length(qs)),rep(NA,length(qs))),tmp[[s]])
rownames(tmp[[s]])=c(1,2)
}
for (i in 1:2) {
for (j in 1:2) {
if (is.null(tmp[[s]][paste(i),paste(j)][[1]])) tmp[[s]][paste(i),paste(j)][[1]]=rep(NA,length(qs))
}
}
}
tmp=lapply(all.data,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
qs=seq(0.1,0.9,0.1) #Define quantiles
tmp=lapply(all.data,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
####### Observed Data ########
all.data=list()
for (useSub in 1:nSub) {
load(paste("Data/Gregory-and-Jackson-(2020)/P",useSub,".Rdata",sep=""))
all.data[[useSub]]=data
}
all.data_null = all.data[participants_null]
all.data = all.data[participants_null]
qs=seq(0.1,0.9,0.1) #Define quantiles
tmp=lapply(all.data,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
for (s in 1:length(participants_null)) {
if (nrow(tmp[[s]])==1) {
tmp[[s]]=rbind(list(rep(NA,length(qs)),rep(NA,length(qs))),tmp[[s]])
rownames(tmp[[s]])=c(1,2)
}
for (i in 1:2) {
for (j in 1:2) {
if (is.null(tmp[[s]][paste(i),paste(j)][[1]])) tmp[[s]][paste(i),paste(j)][[1]]=rep(NA,length(qs))
}
}
}
allQ=array(unlist(tmp),c(length(qs),2,2,41))
tmp=lapply(all.data,function(x) tapply(x$Resp==2,x$Cond,mean))
allP=array(unlist(tmp),c(2,41))
#Means for congruent condition
q.mean.2.1=apply(allQ[,2,1,],1,mean)
p.mean.1=mean(allP[1,])
#Means for incongruent condition
q.mean.2.2=apply(allQ[,2,2,],1,mean)
p.mean.2=mean(allP[2,])
#all in one
quantiles_t0 = ggplot()+
geom_point(aes(x = q.mean.2.1, y = qs*p.mean.1))+
geom_point(aes(x = q.mean.2.1_t0, y = qs*p.mean.1_t0),shape = 1)+
geom_line(aes(x = q.mean.2.1_t0, y = qs*p.mean.1_t0))+
geom_point(aes(x = q.mean.2.2, y = qs*p.mean.2), shape = 15)+
geom_point(aes(x = q.mean.2.2_t0, y = qs*p.mean.2_t0),shape = 0)+
geom_line(aes(x = q.mean.2.2_t0, y = qs*p.mean.2_t0))+
labs(title = "t0")+
theme_apa()
quantiles_t0 # view plot
#all in one
quantiles_t0 = ggplot()+
geom_point(aes(x = q.mean.2.1, y = qs*p.mean.1))+
geom_point(aes(x = q.mean.2.1_t0, y = qs*p.mean.1_t0),shape = 1)+
geom_line(aes(x = q.mean.2.1_t0, y = qs*p.mean.1_t0))+
geom_point(aes(x = q.mean.2.2, y = qs*p.mean.2), shape = 15)+
geom_point(aes(x = q.mean.2.2_t0, y = qs*p.mean.2_t0),shape = 0)+
geom_line(aes(x = q.mean.2.2_t0, y = qs*p.mean.2_t0))+
labs(title = "t0 on null model data")+
theme_apa()
quantiles_t0 # view plot
####### Observed Data ########
all.data=list()
for (useSub in participants_alt) {
load(paste("Data/Gregory-and-Jackson-(2020)/P",useSub,".Rdata",sep=""))
all.data[useSub]=data
}
View(all.data)
# Load in predicted data generated from z DDM (simData)
nsub = 41
all.data_t0 = list()
dataset = 1
for (useSub in 1:nSub) {
load(paste("Data/Model-Predictions/DS", dataset, "_P",useSub,"_t0.RData",sep=""))
all.data_t0[[useSub]]=sim
}
simData_t0=all.data_t0
rm(all.data_t0)
tmp=lapply(simData_t0,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
for (s in 1:length(participants_alt)) {
if (nrow(tmp[[s]])==1) {
tmp[[s]]=rbind(list(rep(NA,length(qs)),rep(NA,length(qs))),tmp[[s]])
rownames(tmp[[s]])=c(1,2)
}
for (i in 1:2) {
for (j in 1:2) {
if (is.null(tmp[[s]][paste(i),paste(j)][[1]])) tmp[[s]][paste(i),paste(j)][[1]]=rep(NA,length(qs))
}
}
}
allQ_t0=array(unlist(tmp),c(length(qs),2,2,41))
tmp=lapply(simData_t0,function(x) tapply(x$Resp==2,x$Cond,mean))
allP_t0=array(unlist(tmp),c(2,41))
#Means for congruent cue condition
q.mean.2.1_t0=apply(allQ_t0[,2,1,],1,mean) #Cond == 1 is congruent cues (from allQ_t0[,2,COND,]...)
p.mean.1_t0=mean(allP_t0[1,])
#Means for incongruent cue condition
q.mean.2.2_t0=apply(allQ_t0[,2,2,],1,mean)
p.mean.2_t0=mean(allP_t0[2,])
#all in one
quantiles_t0 = ggplot()+
geom_point(aes(x = q.mean.2.1, y = qs*p.mean.1))+
geom_point(aes(x = q.mean.2.1_t0, y = qs*p.mean.1_t0),shape = 1)+
geom_line(aes(x = q.mean.2.1_t0, y = qs*p.mean.1_t0))+
geom_point(aes(x = q.mean.2.2, y = qs*p.mean.2), shape = 15)+
geom_point(aes(x = q.mean.2.2_t0, y = qs*p.mean.2_t0),shape = 0)+
geom_line(aes(x = q.mean.2.2_t0, y = qs*p.mean.2_t0))+
labs(title = "t0")+
theme_apa()
quantiles_t0 # view plot
participants_alt
load("Data/BICs.Rdata")
load("Data/AICs.Rdata")
getWeights=function(x) {
useX = x*(-0.5) # Transform BIC/AIC to a chi square distribution
if (mean(is.na(useX)) == 1) {
return(NA)
}
maxLogDens=max(useX)
if (maxLogDens > 700) {
densTransform=maxLogDens-700
useX=useX-densTransform
} else if (maxLogDens < -710) {
densTransform=maxLogDens-700
useX=useX-densTransform
} else {
densTransform=0
}
exp(useX)/sum(exp(useX))
}
BFweights=array(NA,c(S,8))
for (s in 1:S) {
BFweights[s,]= getWeights(BIC_comp[s,])
}
colnames(BFweights) = c("complex", "none", "v", "z", "_z_t0", "v_t0", "all_params", "t0")
S = n
n = 41
S = n
for (s in 1:S) {
BFweights[s,]= getWeights(BIC_comp[s,])
}
BFweights=array(NA,c(S,8))
for (s in 1:S) {
BFweights[s,]= getWeights(BIC_comp[s,])
}
colnames(BFweights) = c("complex", "none", "v", "z", "_z_t0", "v_t0", "all_params", "t0")
View(BFweights)
BFweights_tmp = BFweights
BFweights_tmp=as.data.frame(BFweights)
BFweights_tmp$ID = 1:41
View(BFweights_tmp)
BFweights_alt = filter(BFweights_tmp, none < .5) #participants for which the null model is less than 50% likely
View(BFweights_alt)
BFweights_null = filter(BFweights_tmp, none >= .5) #participants for which the null model is more than 50% likely
####### Observed Data ########
all.data=list()
for (useSub in 1:nSub) {
load(paste("Data/Gregory-and-Jackson-(2020)/P",useSub,".Rdata",sep=""))
all.data[[useSub]]=data
}
all.data = all.data[participants_alt] #only interested in participants that didn't overwhelmingly favor the null model
qs=seq(0.1,0.9,0.1) #Define quantiles
tmp=lapply(all.data,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
for (s in 1:length(participants_alt)) {
if (nrow(tmp[[s]])==1) {
tmp[[s]]=rbind(list(rep(NA,length(qs)),rep(NA,length(qs))),tmp[[s]])
rownames(tmp[[s]])=c(1,2)
}
for (i in 1:2) {
for (j in 1:2) {
if (is.null(tmp[[s]][paste(i),paste(j)][[1]])) tmp[[s]][paste(i),paste(j)][[1]]=rep(NA,length(qs))
}
}
}
allQ=array(unlist(tmp),c(length(qs),2,2,length(participants_alt)))
tmp=lapply(all.data,function(x) tapply(x$Resp==2,x$Cond,mean))
allP=array(unlist(tmp),c(2,length(participants_alt)))
#Means for congruent condition
q.mean.2.1=apply(allQ[,2,1,],1,mean)
p.mean.1=mean(allP[1,])
#Means for incongruent condition
q.mean.2.2=apply(allQ[,2,2,],1,mean)
p.mean.2=mean(allP[2,])
############################
###### Z-V Model ######
###########################
nsub = 41
# Load in predicted data generated from z DDM (simData)
nsub = 41
all.data_t0 = list()
dataset = 1
for (useSub in 1:nSub) {
load(paste("Data/Model-Predictions/DS", dataset, "_P",useSub,"_t0.RData",sep=""))
all.data_t0[[useSub]]=sim
}
simData_t0=all.data_t0[participants_alt]
rm(all.data_t0)
tmp=lapply(simData_t0,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
for (s in 1:length(participants_alt)) {
if (nrow(tmp[[s]])==1) {
tmp[[s]]=rbind(list(rep(NA,length(qs)),rep(NA,length(qs))),tmp[[s]])
rownames(tmp[[s]])=c(1,2)
}
for (i in 1:2) {
for (j in 1:2) {
if (is.null(tmp[[s]][paste(i),paste(j)][[1]])) tmp[[s]][paste(i),paste(j)][[1]]=rep(NA,length(qs))
}
}
}
tmp=lapply(simData_t0,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
for (s in 1:length(participants_alt)) {
if (nrow(tmp[[s]])==1) {
tmp[[s]]=rbind(list(rep(NA,length(qs)),rep(NA,length(qs))),tmp[[s]])
rownames(tmp[[s]])=c(1,2)
}
for (i in 1:2) {
for (j in 1:2) {
if (is.null(tmp[[s]][paste(i),paste(j)][[1]])) tmp[[s]][paste(i),paste(j)][[1]]=rep(NA,length(qs))
}
}
}
allQ_t0=array(unlist(tmp),c(length(qs),2,2,length(participants_alt)))
tmp=lapply(simData_t0,function(x) tapply(x$Resp==2,x$Cond,mean))
allP_t0=array(unlist(tmp),c(2,length(participants_alt)))
#Means for congruent cue condition
q.mean.2.1_t0=apply(allQ_t0[,2,1,],1,mean) #Cond == 1 is congruent cues (from allQ_t0[,2,COND,]...)
p.mean.1_t0=mean(allP_t0[1,])
#Means for incongruent cue condition
q.mean.2.2_t0=apply(allQ_t0[,2,2,],1,mean)
p.mean.2_t0=mean(allP_t0[2,])
#all in one
quantiles_t0 = ggplot()+
geom_point(aes(x = q.mean.2.1, y = qs*p.mean.1))+
geom_point(aes(x = q.mean.2.1_t0, y = qs*p.mean.1_t0),shape = 1)+
geom_line(aes(x = q.mean.2.1_t0, y = qs*p.mean.1_t0))+
geom_point(aes(x = q.mean.2.2, y = qs*p.mean.2), shape = 15)+
geom_point(aes(x = q.mean.2.2_t0, y = qs*p.mean.2_t0),shape = 0)+
geom_line(aes(x = q.mean.2.2_t0, y = qs*p.mean.2_t0))+
labs(title = "t0")+
theme_apa()
quantiles_t0 # view plot
load("data/participants_null.Rdata")
####### Observed Data ########
all.data=list()
for (useSub in 1:nSub) {
load(paste("Data/Gregory-and-Jackson-(2020)/P",useSub,".Rdata",sep=""))
all.data[[useSub]]=data
}
all.data = all.data[participants_null]
qs=seq(0.1,0.9,0.1) #Define quantiles
tmp=lapply(all.data,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
allQ=array(unlist(tmp),c(length(qs),2,2,length(participants_alt)))
tmp=lapply(all.data,function(x) tapply(x$Resp==2,x$Cond,mean))
allP=array(unlist(tmp),c(2,length(participants_alt)))
#Means for congruent condition
q.mean.2.1=apply(allQ[,2,1,],1,mean)
p.mean.1=mean(allP[1,])
#Means for incongruent condition
q.mean.2.2=apply(allQ[,2,2,],1,mean)
p.mean.2=mean(allP[2,])
tmp=lapply(all.data,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
qs=seq(0.1,0.9,0.1) #Define quantiles
tmp=lapply(all.data,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
for (s in 1:length(participants_null)) {
if (nrow(tmp[[s]])==1) {
tmp[[s]]=rbind(list(rep(NA,length(qs)),rep(NA,length(qs))),tmp[[s]])
rownames(tmp[[s]])=c(1,2)
}
for (i in 1:2) {
for (j in 1:2) {
if (is.null(tmp[[s]][paste(i),paste(j)][[1]])) tmp[[s]][paste(i),paste(j)][[1]]=rep(NA,length(qs))
}
}
}
allQ=array(unlist(tmp),c(length(qs),2,2,length(participants_alt)))
tmp=lapply(all.data,function(x) tapply(x$Resp==2,x$Cond,mean))
allP=array(unlist(tmp),c(2,length(participants_alt)))
#Means for congruent condition
q.mean.2.1=apply(allQ[,2,1,],1,mean)
p.mean.1=mean(allP[1,])
#Means for incongruent condition
q.mean.2.2=apply(allQ[,2,2,],1,mean)
p.mean.2=mean(allP[2,])
# Load in predicted data generated from t0 DDM (simData)
nsub = 41
all.data_t0 = list()
dataset = 1
for (useSub in 1:nSub) {
load(paste("Data/Model-Predictions/DS", dataset, "_P",useSub,"_t0.RData",sep=""))
all.data_t0[[useSub]]=sim
}
simData_t0=all.data_t0
simData_t0_null = simData_t0[participants_null]
simData_t0 = simData_t0[participants_null]
rm(all.data_t0)
tmp=lapply(simData_t0,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
for (s in 1:length(participants_null)) {
if (nrow(tmp[[s]])==1) {
tmp[[s]]=rbind(list(rep(NA,length(qs)),rep(NA,length(qs))),tmp[[s]])
rownames(tmp[[s]])=c(1,2)
}
for (i in 1:2) {
for (j in 1:2) {
if (is.null(tmp[[s]][paste(i),paste(j)][[1]])) tmp[[s]][paste(i),paste(j)][[1]]=rep(NA,length(qs))
}
}
}
tmp=lapply(simData_t0,function(x) tapply(x$Time,list(x$Resp,x$Cond),quantile,qs))
for (s in 1:length(participants_null)) {
if (nrow(tmp[[s]])==1) {
tmp[[s]]=rbind(list(rep(NA,length(qs)),rep(NA,length(qs))),tmp[[s]])
rownames(tmp[[s]])=c(1,2)
}
for (i in 1:2) {
for (j in 1:2) {
if (is.null(tmp[[s]][paste(i),paste(j)][[1]])) tmp[[s]][paste(i),paste(j)][[1]]=rep(NA,length(qs))
}
}
}
allQ_t0=array(unlist(tmp),c(length(qs),2,2,length(participants_null)))
tmp=lapply(simData_t0,function(x) tapply(x$Resp==2,x$Cond,mean))
allP_t0=array(unlist(tmp),c(2,length(participants_null)))
#Means for congruent cue condition
q.mean.2.1_t0=apply(allQ_t0[,2,1,],1,mean) #Cond == 1 is congruent cues (from allQ_t0[,2,COND,]...)
p.mean.1_t0=mean(allP_t0[1,])
#Means for incongruent cue condition
q.mean.2.2_t0=apply(allQ_t0[,2,2,],1,mean)
p.mean.2_t0=mean(allP_t0[2,])
#all in one
quantiles_t0 = ggplot()+
geom_point(aes(x = q.mean.2.1, y = qs*p.mean.1))+
geom_point(aes(x = q.mean.2.1_t0, y = qs*p.mean.1_t0),shape = 1)+
geom_line(aes(x = q.mean.2.1_t0, y = qs*p.mean.1_t0))+
geom_point(aes(x = q.mean.2.2, y = qs*p.mean.2), shape = 15)+
geom_point(aes(x = q.mean.2.2_t0, y = qs*p.mean.2_t0),shape = 0)+
geom_line(aes(x = q.mean.2.2_t0, y = qs*p.mean.2_t0))+
labs(title = "t0 on null model data")+
theme_apa()
quantiles_t0 # view plot
####### Observed Data ########
all.data=list()
for (useSub in 1:nSub) {
load(paste("Data/Gregory-and-Jackson-(2020)/P",useSub,".Rdata",sep=""))
all.data[[useSub]]=data
}
View(all.data)
lapply(all.data,function(x) tapply(x$Time,x$Cond,mean))
unlist(lapply(all.data,function(x) tapply(x$Time,x$Cond,mean)[1])-lapply(all.data,function(x) tapply(x$Time,x$Cond,mean)[1]))
unlist(lapply(all.data,function(x) tapply(x$Time,x$Cond,mean)[1]))-unlist(lapply(all.data,function(x) tapply(x$Time,x$Cond,mean)[2]))
plot(1:41,unlist(lapply(all.data,function(x) tapply(x$Time,x$Cond,mean)[1]))-unlist(lapply(all.data,function(x) tapply(x$Time,x$Cond,mean)[2])))
blah=unlist(lapply(all.data,function(x) tapply(x$Time,x$Cond,mean)[1]))-unlist(lapply(all.data,function(x) tapply(x$Time,x$Cond,mean)[2]))
plot(blah,BFweights[,"none"])
plot(BFweights[,"none"],blah)
# Load in predicted data generated from z DDM (simData)
nsub = 41
all.data_t0 = list()
dataset = 1
for (useSub in 1:nSub) {
load(paste("Data/Model-Predictions/DS", dataset, "_P",useSub,"_t0.RData",sep=""))
all.data_t0[[useSub]]=sim
}
View(all.data_t0)
blah1=all.data[[29]]
blah2=all.data_t0[[29]]
blah1.1=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==1])
blah1.2=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==2])
blah2.1=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==1])
blah2.2=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==2])
plot()
plot(c(0,1),c(0,1))
points(blah1.1,blah2.1)
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2))
points(blah1.1,blah2.1)
blah1.1=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah1.2=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
blah2.1=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah2.2=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2))
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
lines(c(0,2),c(0,2),col="red")
all.data_s = list()
for (useSub in 1:nSub) {
load(paste("Data/Model-Predictions/DS",dataset,"_P",useSub,"_simple.RData",sep=""))
all.data_s[[useSub]]=sim
}
for (useSub in 1:nSub) {
load(paste("Data/Model-Predictions/P",useSub,"_simple.RData",sep=""))
all.data_s[[useSub]]=sim
}
> blah1=all.data[[29]]
blah1=all.data[[29]]
blah2=all.data_s[[29]]
blah1.1=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==1])
blah1.2=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==2])
blah2.1=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==1])> blah2.2=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==2])
blah2.1=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==1])
blah2.2=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==2])
plot(c(0,1),c(0,1))
points(blah1.1,blah2.1)
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2))
points(blah1.1,blah2.1)
blah1.1=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah1.2=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
blah2.1=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah2.2=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2))
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
lines(c(0,2),c(0,2),col="red")
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2))
points(blah1.1,blah2.1)
blah1.1=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah1.2=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
blah2.1=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah2.2=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2))
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
lines(c(0,2),c(0,2),col="red")
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2), main = "null")
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
lines(c(0,2),c(0,2),col="red")
blah1=all.data[[29]]
blah2=all.data_s[[29]]
blah1.1=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah1.2=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
blah2.1=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah2.2=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2), main = "null")
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
lines(c(0,2),c(0,2),col="red")
blah1=all.data[[29]]
blah2=all.data_s[[29]]
blah1.1=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah1.2=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
blah2.1=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah2.2=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2), main = "null")
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
lines(c(0,2),c(0,2),col="red")
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2), main = "null")
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
lines(c(0,2),c(0,2),col="red")
blah1=all.data[[29]]
blah2=all.data_t0[[29]]
blah1.1=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah1.2=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
blah2.1=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah2.2=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2), main = "t0")
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
lines(c(0,2),c(0,2),col="red")
blah1=all.data[[29]]
blah2=all.data_s[[29]]
blah1.1=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah1.2=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
blah2.1=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah2.2=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2), main = "null")
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
lines(c(0,2),c(0,2),col="red")
blah1=all.data[[29]]
blah2=all.data_s[[29]]
blah1.1=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah1.2=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
blah2.1=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah2.2=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
View(all.data)
all.data[1]
blah1=all.data[[29]]
blah2=all.data_s[[29]]
blah1.1=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==1])
blah1.2=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==2])
blah2.1=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==1])
blah2.2=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==2])
plot(c(0,1),c(0,1))
points(blah1.1,blah2.1)
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2))
points(blah1.1,blah2.1)
blah1.1=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah1.2=quantile(blah1$Time[blah1$Resp==2 & blah1$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
blah2.1=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah2.2=quantile(blah2$Time[blah2$Resp==2 & blah2$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2), main = "null")
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
lines(c(0,2),c(0,2),col="red")
blah1=all.data[[29]]
blah2=all.data_s[[29]]
blah1.1=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah1.2=quantile(blah1$Time[blah1$Resp==1 & blah1$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
blah2.1=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==1],c(0.1,0.3,0.5,0.7,0.9))
blah2.2=quantile(blah2$Time[blah2$Resp==1 & blah2$Cond==2],c(0.1,0.3,0.5,0.7,0.9))
plot(c(100),c(100),xlim=c(0,2),ylim=c(0,2), main = "null")
points(blah1.1,blah2.1)
points(blah1.2,blah2.2,pch=4)
lines(c(0,2),c(0,2),col="red")
