source('~/pCloud Drive/2021/Gaze-Cueing/Data/dataset1a/derived/magnitudes-params-incl.probabilities.R')
load("~/pCloud Drive/2021/Gaze-Cueing/Modelling/dataset1a/07_Outputs/P1_all-params_Model.Rdata")
source('~/pCloud Drive/2021/Gaze-Cueing/Data/dataset1a/derived/magnitudes-params-incl.probabilities.R')
load(bmrs)
load(brms)
library(brms)
?brms
?brm
library(tidyverse)
library(brms)
install.packages("brms")
library(brms)
R.version.string
install.packages("MikTex")
library(aaltobda)
library(tidyverse)
data = data("bioassay_posterior")
force(bioassay_posterior)
data = bioassay_posterior
cor(data$alpha,data$beta)
alpha_mean = mean(rnorm(10000,0,2^2))
alpha_mean
beta_mean = mean(rnorm(10000,10,10^2))
beta_mean
biv_mean = c(alpha_mean,beta_mean)
cov(bioassay_posterior)
alpha = rnorm(10000,0,2^2)
alpha_mean = mean(alpha)
beta_mean = mean(beta)
beta = rnorm(10000,10,10^2)
beta_mean = mean(beta)
biv_mean = c(alpha,beta)
biv_mean
abComb = cbind(alpha,beta)
abComb = cbind(alpha,beta)
biv_mean = c(abComb)
biv_mean
biv_mean = cov(abComb)
biv_mean = cov(abComb)
biv_mean
cor(alpha,beta)
biv_mean = c(alpha_mean,beta_mean)
biv_mean
biv_cov
# Covariance of alpha and beta
abComb = cbind(alpha,beta)
biv_cov = cov(abComb)
biv_cov
var(beta)
var(alpha)
hist(beta)
hist(alpha)
names(biv_cov) = c("alpha","beta")
biv_mean
names(biv_cov) = c("alpha","beta")
biv_mean
param = c("alpha","beta")
biv_mean = c(alpha_mean,beta_mean)
biv_mean = rbind(param,biv_mean)
biv_mean
cor(alpha,beta)
plot(alpha,beta)
library(markmyassignment)
assignment_path <-
paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment4.yml", sep="")
set_assignment(assignment_path)
mean_alpha = mean(data$alpha)
mean_alpha
CI_alpha = quantile(data$alpha, c(0.025,0.975))
CI_alpha
c(mean_alpha,CI_alpha)
name(mean_alpha) = "mean"
names(mean_alpha) = "mean"
CI_alpha = quantile(data$alpha, c(0.025,0.975))
c(mean_alpha,CI_alpha)
names(mean_alpha) = "alpha mean"
CI_alpha = quantile(data$alpha, c(0.025,0.975))
c(mean_alpha,CI_alpha)
mean_beta = mean(data$beta)
names(mean_beta) = "beta mean"
CI_beta = quantile(data$beta, c(0.025,0.975))
c(mean_beta,CI_beta)
MCSE = function(variance,theta,S) {
sqrt(var(theta)/S)
}
MCSE = function(theta,S) {
sqrt(var(theta)/S)
}
MCSE_alpha = MCSE(data$alpha,4000)
MCSE_alpha
names(MCSE_alpha) = "MCSE"
c(mean_alpha,CI_alpha,MCSE_alpha)
mcse_quantile(4000,0.5)
mcse_quantile(4000,.95)
mcse_quantile(4000,50)
mcse_quantile(4000,0.5)
mcse(data$alpha,0.5)
mcse_quantile(data$alpha,0.5)
mcse_quantile(data$alpha,0.5)
mcse_quantile(data$alpha,0.5)
MCSE = function(theta) {
sqrt(var(theta)/length(theta))
}
MCSE_alpha = MCSE(data$alpha,4000)
MCSE_alpha = MCSE(data$alpha)
names(MCSE_alpha) = "MCSE"
c(mean_alpha,CI_alpha,MCSE_alpha)
mean_alpha = round(mean(data$alpha),2)
names(mean_alpha) = "alpha mean"
CI_alpha = quantile(data$alpha, c(0.025,0.975))
MCSE = function(theta) {
sqrt(var(theta)/length(theta))
}
MCSE_alpha = MCSE(data$alpha)
names(MCSE_alpha) = "MCSE"
c(mean_alpha,CI_alpha,MCSE_alpha)
c(round(mean_alpha,2),CI_alpha,MCSE_alpha)
mean_alpha
MCSE = function(theta) {
sqrt(var(theta)/length(theta))
}
MCSE_alpha = MCSE(data$alpha)
names(MCSE_alpha) = "MCSE"
round(c(mean_alpha,CI_alpha,MCSE_alpha),1)
mean_alpha = round(mean(data$alpha),2)
names(mean_alpha) = "alpha mean"
names(mean_alpha) = "alpha mean"
CI_alpha = quantile(data$alpha, c(0.025,0.975))
round(c(mean_alpha,CI_alpha),1) # Round to 1 decimal place because there is 1 non-zero MCSE
MCSE_alpha
names(MCSE_alpha) = "MCSE alpha"
MCSE_alpha
MCSE_beta = MCSE(data$beta)
names(MCSE_beta) = "MCSE Beta"
MCSE_beta
rouns(c(mean_beta,CI_beta),1)
mean_beta = mean(data$beta)
names(mean_beta) = "beta mean"
CI_beta = quantile(data$beta, c(0.025,0.975))
round(c(mean_beta,CI_beta),1)
?mcse_quantile
mcse_quantile(data$alpha,.95)
mcse_quantile(data$alpha,.97)
mcse_quantile(data$alpha,.5)
alpha <- c(1.896, -3.6,  0.374, 0.964, -3.123, -1.581)
alpha <- c(1.896, -3.6,  0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
alpha_prior = rnorm(10000,0,2^2)
alpha_prior = rnorm(10000,0,2^2)
beta_prior = rnorm(10000,10,10^2)
?rmvnorm
test = rmvnorm(10000,biv_mean,biv_cov)
class(biv_mean)
biv_mean
# means of alpha and beta
alpha_mean = mean(alpha)
beta_mean = mean(beta)
biv_mean = c(alpha_mean,beta_mean)
names(biv_mean) = c("alpha","beta")
biv_mean
test = rmvnorm(10000,biv_mean,biv_cov)
test
hist(test$alpha)
hist(test[,1])
# loading the libraries
library(tidyverse)
library(here)
# put in commands to load the dataset into a tibble called d
loc <- here("shadowsurvey.csv")
d = read.csv(file = loc)
d <- read.csv(file = loc)
View(d)
summary(d)
d$goodFood <- mean(d$carrot, d$cake,d$meat,d$bean)
d$goodFood <- mean(c(d$carrot,d$cake,d$meat,d$bean))
d$goodFood
d$badFood <- mean(c(d$mud,d$dirt))
d$badFood
d %>%
d %>%
mutate(goodFood = mean(c(d$carrot,d$cake,d$meat,d$bean)),
badFood = mean(c(d$mud,d$dirt)))
d %>%
mutate(goodFood = mean(c(carrot,cake,meat,bean)),
badFood = mean(c(mud,dirt)))
hist(goodFood)
hist(d$goodFood)
d$goodFood <- (d$carrot+d$cake+d$meat+d$bean)/4
d$badFood <- (d$mud+d$dirt)/4
d$badFood
hist(d$badFood)
hist(d$goodFood)
?hist
d %>%
mutate(goodFood = (carrot+cake+meat+bean)/4,
badFood = (mud+dirt/2))
hist(d$goodFood,main = "Good Food",col = "blue")
hist(d$badFood,main = "Bad Food",col = "Red")
mean(goodFood)
mean(d$goodFood)
median(d$goodFood)
mode(d$goodFood)
mode(d$goodFood)
?mode
max(freq(d$goodFood))
quantile(d$goodFood, c(0.1,0.9))
table(d$goodFood)
max(table(d$goodFood))
table(d$year)
table(d$age)
table(d$year)
table(d$year,d$species)
table(d$species,d$year)
d %>%
group_by(gender) %>%
summarise(MeanGF = mean(goodFood), meanBF = mean(badFood))
d %>%
group_by(gender) %>%
summarise(MeanGF = mean(goodFood), meanBF = mean(badFood))%>%
ungroup()
d %>%
group_by(gender) %>%
summarise(MeanGF = mean(goodFood), meanBF = mean(badFood))%>%
ungroup(d)
?ungroup
d %>%
group_by(gender) %>%
summarise(MeanGF = mean(goodFood), meanBF = mean(badFood))%>%
ungroup(gender)
d %>%
group_by(gender) %>%
summarise(MeanGF = mean(goodFood), meanBF = mean(badFood))%>%
ungroup()
?rtnew
?dnorm
# importance sampling
theta = seq(1,20,0.1)
pX = dnorm(theta,4,2)
plot(theta,pX)
pX = dnorm(theta,8,2)
qX = dnorm(theta,8,1) # "any other function that is non-zero when pX is non-zero"
plot(theta,pX)
plot(theta,pX,"l")
qX = dnorm(theta,10,1) # "any other function that is non-zero when pX is non-zero"
lines(theta,qx,"l")
# importance sampling
theta = seq(1,20,0.1)
pX = dnorm(theta,8,2)
qX = dnorm(theta,10,1) # "any other function that is non-zero when pX is non-zero"
plot(theta,pX,"l")
lines(theta,qx,"l")
# importance sampling
theta = seq(1,20,0.1)
pX = dnorm(theta,8,2)
qX = dnorm(theta,10,1) # "any other function that is non-zero when pX is non-zero"
plot(theta,pX,"l")
lines(theta,qX,"l")
qX = dnorm(theta,10,1.5) # "any other function that is non-zero when pX is non-zero"
# importance sampling
theta = seq(1,20,0.1)
pX = dnorm(theta,8,2)
qX = dnorm(theta,10,1.5) # "any other function that is non-zero when pX is non-zero"
plot(theta,pX,"l")
lines(theta,qX,"l")
# importance sampling
theta = seq(1,20,0.1)
pX = dnorm(theta,8,2)
qX = dnorm(theta,10,2) # "any other function that is non-zero when pX is non-zero"
plot(theta,pX,"l")
lines(theta,qX,"l")
# importance sampling
x = rnorm(10,8,2)
# importance sampling
x = x
pX = dnorm(theta,mean(x),sd(x))
qX = dnorm(theta,8,2) # "any other function that is non-zero when pX is non-zero"
plot(theta,pX,"l")
lines(theta,qX,"l")
{plot(theta,pX,"l")
lines(theta,qX,"l")}
pX[5]
fX = rnorm(1000,mean(x),sd(x))
fX[5]
pnorm(0.5)
pnorm(5,mean(x),sd(x))
pnorm(8,mean(x),sd(x))
pnorm(15,mean(x),sd(x))
pnorm(100,mean(x),sd(x))
alpha_prior = rnorm(10000,0,2^2)
alpha_prior = rnorm(10000,0,2^2)
beta_prior = rnorm(10000,10,10^2)
?rmvnorm
?dmvnorm
?seq
dmvnorm(seq(-5,30,length.out = ns),c(mean(alpha),mean(theta),cov(alpha,beta)))
dmvnorm(x = seq(-5,30,length.out = ns),mean = c(mean(alpha),  mean(theta)),sigma = cov(alpha,beta))
cov(alpha,beta)
cov(alpha,beta))
dmvnorm(x = seq(-5,30,length.out = ns),mean = c(mean(alpha),  mean(theta)),sigma = cov(cbind(alpha,beta)))
ns = 10000
dmvnorm(x = seq(-5,30,length.out = ns),mean = c(mean(alpha),  mean(theta)),sigma = cov(cbind(alpha,beta)))
dmvnorm(x = seq(-5,30,length.out = ns),mean = c(mean(alpha),  mean(theta)),sigma = cov(cbind(alpha,beta)))
c(mean(alpha),  mean(theta))
cov(cbind(alpha,beta))
ns = 1000
dmvnorm(x = seq(-5,30,length.out = ns),mean = c(mean(alpha),  mean(theta)),sigma = cov(cbind(alpha,beta)))
dmvnorm(x = cbind(alpha,beta),mean = c(mean(alpha),  mean(theta)),sigma = cov(cbind(alpha,beta)))
?rmvnorm
?bioassaylp
gTheeta = rmvnorm(length(alpha),10,4)
gTheeta = rmvnorm(length(alpha),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta)))
gTheta = rmvnorm(length(alpha),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta)))
gTheta = rmvnorm(length(alpha),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta)))
gTheta
wTheta = dnorm(length(alpha),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta)))
wTheta
wTheta = dmvnorm(length(alpha),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta)))
wTheta = dmvnorm(cbind(alpha,beta),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta)))
wTheta = dmvnorm(as.array(cbind(alpha,beta)),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta)))
wTheta
?bioassaylp
head(bioassay)
length(bioassay$x)
bioassay
data("bioassay")
force(bioassay)
bioassaylp(alpha,beta,x =bioassay$x, y = bioassay$y, n = bioassay$n)
wTheta = dmvnorm(as.array(cbind(alpha,beta)),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta)))
gTheta = rmvnorm(length(alpha),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta)))
gTheta
wTheta
qTheta = dmvnorm(as.array(cbind(alpha,beta)),c(mean(alpha),mean(beta)),cov(cbind(alpha,beta)))
wTheta  = qTheta/gTheta
wTheta
log(qTheta)
log(qTheta[,1]*qTheta[,2])
log(qTheta[,"alpha"]*qTheta[,"beta"])
log(gTheta[,"alpha"]*qTheta[,"beta"])
qTheta
gtheta
gTheta
log(gTheta[,"alpha"]*gTheta[,"beta"])
tmp = gTheta[,"alpha"]*gTheta[,"beta"]
tmp
log(tmp)
exp(tmp)
cA = rep(alpha,each = length(beta))
cA
?rep_along
rep()
?rep()
cB = rep(beta,each = length(alpha))
cB = rep(beta,each = length(alpha))
cB
logl <- function(df, a, b)
df['y']*(a + b*df['x']) - df['n']*log1p(exp(a + b*df['x']))
# calculate likelihoods: apply logl function for each observation
# ie. each row of data frame of x, n and y
p <- apply(bioassay, 1, logl, cA, cB) %>%
# sum the log likelihoods of observations
# and exponentiate to get the joint likelihood
rowSums() %>% exp()
P
logl(bioassay,alpha,beta)
logl_1 = logl(bioassay,alpha,beta)
logl_1
p <- apply(bioassay, 1, logl_1, cA, cB) %>%
# sum the log likelihoods of observations
# and exponentiate to get the joint likelihood
rowSums() %>% exp()
p <- apply(bioassay, 1, logl, cA, cB) %>%
# sum the log likelihoods of observations
# and exponentiate to get the joint likelihood
rowSums() %>% exp()
p
hist(p)
plot(p)
?applt
nsamp <- 1000
samp_indices <- sample(length(p), size = nsamp,
replace = T, prob = p/sum(p))
samp_A <- cA[samp_indices[1:nsamp]]
samp_B <- cB[samp_indices[1:nsamp]]
# add random jitter, see BDA3 p. 76
samp_A <- samp_A + runif(nsamp, (A[1] - A[2])/2, (A[2] - A[1])/2)
samp_B <- samp_B + runif(nsamp, (B[1] - B[2])/2, (B[2] - B[1])/2)
# add random jitter, see BDA3 p. 76
samp_A <- samp_A + runif(nsamp, (A[1] - A[2])/2, (A[2] - A[1])/2)
# add random jitter, see BDA3 p. 76
samp_A <- samp_A + runif(nsamp, (alpha[1] - alpha[2])/2, (alpha[2] - alpha[1])/2)
samp_B <- samp_B + runif(nsamp, (beta[1] - beta[2])/2, (beta[2] - beta[1])/2)
samp_A
source("~/cloudstor/Gaze-Cueing/Recovery/01_sim_1.R")
source("~/cloudstor/Gaze-Cueing/Recovery/01_sim_1.R")
system("R CMD SHLIB DIFF.c")
source("~/cloudstor/Gaze-Cueing/Recovery/01_sim_1.R")
x=1:100
r=0.1
a=4
b=2
plot(x,a+b*exp(-r*x),type="l",main="Classic Exponential Decay")
plot(x,a+b*exp(r*x),type="l",main="Your Exponential Increase")
plot(x,a-b*exp(-r*x),type="l",main="Mirrored Exponential Decay")
load("~/cloudstor/ParAcT/data/evansetal-18/derived/allBIC.Rdata")
View(allBIC)
source("~/cloudstor/ParAcT/modelling/evansetal-18/10_model-comparison.R")
